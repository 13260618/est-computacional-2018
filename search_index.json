[
["index.html", "Estadística Computacional Información del curso", " Estadística Computacional Teresa Ortiz Información del curso Ligas Correo: teresa.ortiz.mancera@gmail.com Notas: https://tereom.github.io/est-computacional-2018/ GitHub: https://github.com/tereom/est-computacional-2018 Temario Manipulación y visualización de datos Visualización de datos. Manipulación y limpieza de datos. Temas selectos de programación en R. Referencias: Tufte (2006), Cleveland (1993), Wickham and Grolemund (2017), Wickham (2014). Inferencia y remuestreo Repaso de probabilidad. Muestreo y probabilidad. Inferencia. El principio del plug-in. Bootstrap Cálculo de errores estándar e intervalos de confianza. Estructuras de datos complejos. Introducción a modelos probabilísticos. Referencias: Ross (1998), Efron and Tibshirani (1993). Modelos de probabilidad y simulación Variables aleatorias y modelos probabilísticos. Familias importantes: discretas y continuas. Teoría básica de simulación El generador uniforme de números aleatorios. El método de la transformación inversa. Simulación de variables aleatorias discretas con soporte finito. Otras variables aleatorias. Simulación para modelos gráficos Modelos probabilíticos gráficos. Simulación (e.g. ANOVA, regresión simple). Inferencia paramétrica y remuestreo Modelos paramétricos. Bootsrap paramétrico. Inferencia de gráficas Referencias: Gelman and Hill (2007). Métodos computacionales e inferencia Bayesiana Inferencia bayesiana. Métodos diretos Familias conjugadas. Aproximación por cuadrícula. Aceptación y rechazo. MCMC Cadenas de Markov. Metropolis-Hastings. Muestreador de Gibbs. Monte Carlo Hamiltoniano. Diagnósticos de convergencia. Referencias: Kruschke (2015), Gelman et al. (2013). Calificación Tareas 20% (se envían por correo con título: EstComp-TareaXX), exámen parcial (proyecto y exámen en clase) 40%, Examen final 40%. Software https://www.r-project.org https://www.rstudio.com http://mc-stan.org Otros Socrative: https://b.socrative.com/login/student/ Room: ESTCOMP Referencias "],
["introducciona-a-visualizacion.html", "Sección 1 Introduccióna a visualización", " Sección 1 Introduccióna a visualización “The simple graph has brought more information to the data analyst’s mind than any other device.” — John Tukey El cuarteto de Ascombe En 1971 un estadístico llamado Frank Anscombe (fundador del departamento de Estadística de la Universidad de Yale) encontró cuatro conjuntos de datos, cada uno consiste de 11 observaciones y tienen las mismas propiedades estadísticas. Sin embargo, cuando analizamos los datos de manera gráfica en un histograma encontramos rápidamente que los conjuntos de datos son muy distintos. Media de \\(x\\): 9 Varianza muestral de \\(x\\): 11 Media de \\(y\\): 7.50 Varianza muestral de \\(y\\): 4.12 Correlación entre \\(x\\) y \\(y\\): 0.816 Línea de regresión lineal: \\(y = 3.00 + 0.500x\\) En la gráfica del primer conjunto de datos, se ven datos como los que se tendrían en una relación lineal simple con un modelo que cumple los supuestos de normalidad. La segunda gráfica (arriba a la derecha) muestra unos datos que tienen una asociación pero definitivamente no es lineal. En la tercera gráfica (abajo a la izquierda) están puntos alineados perfectamente en una línea recta, excepto por uno de ellos. En la última gráfica podemos ver un ejemplo en el cual basta tener una observación atípica para que se produzca un coeficiente de correlación alto aún cuando en realidad no existe una asociación lineal entre las dos variables. El cuarteto de Ascombe inspiró una técnica para crear datos que comparten las propiedades estadísticas al igual que en el cuarteto, pero que producen gráficas muy distintas (Matejka, Fitzmaurice). "],
["introduccion.html", "1.1 Introducción", " 1.1 Introducción La visualización de datos no trata de hacer gráficas “bonitas” o “divertidas”, ni de simplificar lo complejo o ayudar a una persona “que no entiende mucho” a entender ideas complejas. Más bien, trata de aprovechar nuestra gran capacidad de procesamiento visual para exhibir de manera clara aspectos importantes de los datos. El siguiente ejemplo de (Tufte 2006), ilustra claramente la diferencia entre estos dos enfoques. A la izquierda están gráficas (más o menos típicas de Powerpoint) basadas en la filosofía de simplificar, de intentar no “ahogar” al lector con datos. El resultado es una colección incoherente, de bajo contenido, que no tiene mucho qué decir y que es, “indeferente al contenido y la evidencia”. A la derecha está una variación del rediseño de Tufte en forma de tabla, que en este caso particular es una manera eficiente de mostrar claramente los patrones que hay en este conjunto simple de datos. ¿Qué principios son los que soportan la efectividad de esta tabla sobre la gráfica de la derecha? Veremos que hay dos conjuntos de principios importantes: unos relacionados con el diseño y otros con la naturaleza del análisis de datos, independientemente del método de visualización. Visualización de datos en la estadística La estadística tradicionalmente se divide en dos partes: una parte de naturaleza exploratoria, donde jugamos el papel de detectives en búsqueda de los elementos de evidencia importante, y una parte de naturaleza inferencial, donde nos convertimos en jueces donde le damos pesos de credibilidad a la evidencia que presenta el detective. Estas dos partes tienen interacción fuerte en la práctica, pero por razones históricas se considera “superior” a la parte inferencial por encima de la exploratoria. Aunque en el proceso de inferencia las gráficas cada vez son más importantes, la visualización entra más claramente dentro del análisis exploratorio de datos. Y como en un principio no es claro como la visualización aporta al proceso de la inferencia, se le consideró por mucho tiempo como un área de poca importancia para la estadística: una herramienta que en todo caso sirve para comunicar ideas simples, de manera deficiente, y a personas poco sofisticadas. El peor lado de este punto de vista consiste en restringirse a el análisis estadístico rutinario Cleveland (1993): aplicar las recetas y negarse a ver los datos de distinta manera (¡incluso pensar que esto puede sesgar los resultados, o que nos podría engañar!). El siguiente ejemplo muestra un caso grave y real (no simulado) de este análisis estadístico rutinario (tomado de Cleveland (1994)). A la derecha mostramos los resultados de un experimento de agricultura. Se cultivaron diez variedades de cebada en seis sitios de Minnesota, en 1921 y 1932. Este es uno de los primeros ejemplos en el que se aplicaron las ideas de Fisher en cuanto a diseño de experimentos. Estos datos fueron reanalizados desde esa época por muchos agrónomos. Hasta muy recientemente se detectó la anomalía en el comportamiento de los años en el sitio Morris, el cual es evidente en la gráfica. Investigación posterior ha mostrado convincentemente que en algún momento alguien volteó las etiquetas de los años en este sitio. Este ejemplo muestra, en primer lugar, que la visualización es crucial en el proceso de análisis de datos: sin ella estamos expuestos a no encontrar aspectos importantes de los datos (errores) que deben ser discutidos - aún cuando nuestra receta de análisis no considere estos aspectos. Ninguna receta puede aproximarse a describir todas las complejidades y detalles en un conjunto de datos de tamaño razonable (este ejemplo, en realidad, es chico). Sin embargo, la visualización de datos, por su enfoque menos estructurado, y el hecho de que se apoya en un medio con un “ancho de banda” mayor al que puede producir un cierto número de cantidades resumen, es ideal para investigar estos aspectos y detalles. Visualización popular de datos Publicaciones populares (periódicos, revistas, sitios internet) muchas veces incluyen visualización de datos como parte de sus artículos o reportajes. En general siguen el mismo patrón que en la visión tradicionalista de la estadística: sirven más para divertir que para explicar, tienden a explicar ideas simples y conjuntos chicos de datos, y se consideran como una “ayuda” para los “lectores menos sofisticados”. Casi siempre se trata de gráficas triviales (muchas veces con errores graves) que no aportan mucho a artículos que tienen un nivel de complejidad mucho mayor (es la filosofía: lo escrito para el adulto, lo graficado para el niño). Referencias "],
["teoria-de-visualizacion-de-datos-tufte-cleveland-tukey.html", "1.2 Teoría de visualización de datos (Tufte, Cleveland, Tukey)", " 1.2 Teoría de visualización de datos (Tufte, Cleveland, Tukey) Existe teoría fundamentada acerca de la visualización. Después del trabajo pionero de Tukey, los principios e indicadores de Tufte se basan en un estudio de la historia de la graficación y ejercicios de muestreo de la práctica gráfica a lo largo de varias disciplinas (¿cuáles son las mejores gráficas? ¿por qué? El trabajo de Cleveland es orientado a la práctica del análisis de datos (¿cuáles gráficas nos han ayudado a mostrar claramente los resultados del análisis?), por una parte, y a algunos estudios de percepción visual. Principios generales del diseño analítico Aplicables a una presentación o análisis completos, y como guía para construir nuevas visualizaciones (Tufte 2006). Principio 1. Muestra comparaciones, contrastes, diferencias. Principio 2. Muestra causalidad, mecanismo, explicación, estructura sistemática. Principio 3. Muestra datos multivariados, es decir, más de una o dos variables. Principio 4. Integra palabras, números, imágenes y diagramas. Principio 5. Describe la totalidad de la evidencia. Muestra fuentes usadas y problemas relevantes. Principio 6. Las presentaciones analíticas, a fin de cuentas, se sostienen o caen dependiendo de la calidad, relevancia e integridad de su contenido. Técnicas de visualización Esta categoría incluye técnicas específicas que dependen de la forma de nuestros datos y el tipo de pregunta que queremos investigar (Tukey (1977), Cleveland (1993), Cleveland (1994), Tufte (2006)). Tipos de gráficas: cuantiles, histogramas, caja y brazos, gráficas de dispersión, puntos/barras/ líneas, series de tiempo. Técnicas para mejorar gráficas: Transformación de datos, transparencia, vibración, banking 45, suavizamiento y bandas de confianza. Pequeños múltiplos Tablas Indicadores de calidad gráfica Aplicables a cualquier gráfica en particular. Estas son guías concretas y relativamente objetivas para evaluar la calidad de una gráfica (Tufte 1986). Integridad Gráfica. El factor de engaño, es decir, la distorsión gráfica de las cantidades representadas, debe ser mínimo. Chartjunk. Minimizar el uso de decoración gráfica que interfiera con la interpretación de los datos: 3D, rejillas, rellenos con patrones. Tinta de datos. Maximizar la proporción de tinta de datos vs. tinta total de la gráfica. For non-data- ink, less is more. For data-ink, less is a bore. Densidad de datos. Las mejores gráficas tienen mayor densidad de datos, que es la razón entre el tamaño del conjunto de datos y el área de la gráfica. Las gráficas se pueden encoger mucho. Percepción visual. Algunas tareas son más fáciles para el ojo humano que otras (Cleveland 1994). Factor de engaño, chartjunk y pies El factor de engaño es el cociente entre el efecto mostrado en una gráfica y el efecto correspondiente en los datos. Idealmente, el factor de engaño debe ser 1 (ninguna distorsión). El chartjunk son aquellos elementos gráficos que no corresponden a variación de datos, o que entorpecen la interpretación de una gráfica. Estos son los indicadores de calidad más fáciles de entender y aplicar, y afortunadamente cada vez son menos comunes. Un diseño popular que califica como chartjunk y además introduce factores de engaño es el pie de 3D. En la gráfica de la derecha, podemos ver como la rebanada C se ve más grande que la rebanada A, aunque claramente ese no es el caso (factor de engaño). La razón es la variación en la perspectiva que no corresponde a variación en los datos (chartjunk). Corregimos quitando el efecto 3D. Esto reduce el factor de engaño pero hay todavía elementos que pueden mejorar la comprensión: se trata de la decodificiacion que hay que hacer categoría - color - cuantificación. Podemos agregar las etiquetas como se muestra en la serie de la derecha, pero entonces: ¿por qué no mostrar simplemente la tabla de datos? ¿qué agrega el pie a la interpretación? La deficiencias en el pie se pueden ver claramente al intentar graficar más categorías (13) . En el primer pie no podemos distinguir realmente cuáles son las categorías grandes y cuáles las chicas, y es muy difícil tener una imagen mental clara de estos datos. Agregar los porcentajes ayuda, pero entonces, otra vez, preguntamos cuál es el propósito del pie. La tabla de la izquierda hace todo el trabajo (una vez que ordenamos las categrías de la más grande a la más chica). Es posible hacer una gráfica de barras como la de abajo a la izquierda. Hay otros tipos de chartjunk comunes: uno es la textura de barras, por ejemplo. El efecto es la producción de un efecto moiré que es desagradable y quita la atención de los datos, como en la gráfica de barras de abajo. Otro común son las rejillas, como mostramos en las gráficas de la izquierda. Nótese como en estos casos hay efectos ópticos no planeados que degradan la percepción de los patrones en los datos. Series de tiempo y promedio de 45 Las series de tiempo son una especie particular de las gráficas de dispersión, en donde la dimensión horizontal es el tiempo. Buscamos entender cómo varía una medición dada en el tiempo. Estas gráficas son mas útiles cuando se construyen usando el principio del promedio de 45 grados: los patrones de variación en el tiempo se distinguen mejor (aproximadamente) cuando el promedio de pendiente (en valor absoluto) en las gráficas está cercano a 45 grados. El siguiente ejempo, que muestra la actividad de manchas solares del sol, muestra claramente este principio: Espto también es un principio para decidir la razón de aspecto de cualquier gráfica de dispersión (y también gráficas de barras). Esta regla supera el principio de que “las escalas deben comenzar en cero”. En realidad este último principio cuida contra dos errores en la graficación: no poner atención a la escala e intentar comparar gráficas que no están dibujadas en la misma escala. Poniendo atención a estos dos aspectos (incluso llamado a veces la atención a estos puntos, Stephen Few) no hay necesidad de seguir la regla del 0. Pequeños múltiplos y densidad gráfica La densidad de una gráfica es el tamaño del conjunto de datos que se grafica comparado con el área total de la gráfica. En el siguiente ejemplo, graficamos en logaritmo-10 de cabezas de ganado en Francia (cerdos, res, ovejas y caballos). La gráfica de la izquierda es pobre en densidad pues sólo representa 4 datos. La manera más fácil de mejorar la densidad es hacer más chica la gráfica: La razón de este encogimiento es una que tiene qué ver con las oportunidades perdidas de una gráfica grande. Si repetimos este mismo patrón (misma escala, mismos tipos de ganado) para distintos países obtenemos la siguiente gráfica: Esta es una gráfica de puntos. Es útil como sustituto de una gráfica de barras, y es superior en el sentido de que una mayor proporción de la tinta que se usa es tinta de datos. Otra vez, mayor proporción de tinta de datos representa más oportunidades que se pueden capitalizar, como muestra la gráfica de punto y líneas que mostramos al principio (rendimiento en campos de cebada). Tinta de datos Maximizar la proporción de tinta de datos en nuestras gráficas tiene beneficios inmediatos. La regla es: si hay tinta que no representa variación en los datos, o la eliminación de esa tinta no representa pérdidas de significado, esa tinta debe ser eliminada. El ejemplo más claro es el de las rejillas en gráficas y tablas: ¿Por qué usar grises en lugar de negros? La respuesta tiene qué ver con el principio de tinta de datos: si marcamos las diferencias sutil pero claramente, tenemos más oportunidades abiertas para hacer énfasis en lo que nos interesa: a una gráfica o tabla saturada no se le puede hacer más - es difícil agregar elementos adicionales que ayuden a la comprensión. Si comenzamos marcando con sutileza, entonces se puede hacer más. Los mapas geográficos son un buen ejemplo de este principio. El espacio en blanco es suficientemente bueno para indicar las fronteras en una tabla, y facilita la lectura: Percepción de escala Entre la percepción visual y la interpretación de una gráfica están implícitas tareas visuales específicas que las personas debemos realizar para ver correctamente la gráfica. En la década de los ochenta, William S. Cleveland y Robert McGill realizaron algunos experimentos identificando y clasificando estas tareas para diferentes tipos de gráficos (Cleveland and McGill 1984). En estos, se le pregunta a la persona que compare dos valores dentro de una gráfica, por ejemplo, en dos barras en una gráfica de barras, o dos rebanadas de una gráfica de pie. Los resultados de Cleveland y McGill fueron replicados por Heer y Bostock en 2010 y los resultados se muestran en las gráficas de la derecha: Minard Concluimos esta sección con una gráfica que, aunque poco común, ejemplifica los principios de una buena gráfica, y es reconocida como una de las mejores visualizaciones de la historia. Una gráfica excelente, presenta datos interesantes de forma bien diseñada: es una cuestión de fondo, de diseño, y estadística… [Se] compone de ideas complejas comunicadas con claridad, precisión y eficiencia. … [Es] lo que da al espectador la mayor cantidad de ideas, en el menor tiempo, con la menor cantidad de tinta, y en el espacio más pequeño. … Es casi siempre multivariado. … Una excelente gráfica debe decir la verdad acerca de los datos. (Tufte, 1983) La famosa visualización de Charles Joseph Minard de la marcha de Napoleón sobre Moscú, ilustra los principios de una buena gráfica. Tufte señala que esta imagen “bien podría ser el mejor gráfico estadístico jamás dibujado”, y sostiene que “cuenta una historia rica y coherente con sus datos multivariados, mucho más esclarecedora que un solo número que rebota en el tiempo”. Se representan seis variables: el tamaño del ejército, su ubicación en una superficie bidimensional, la dirección del movimiento del ejército y la temperatura en varias fechas durante la retirada de Moscú“. Hoy en día Minard es reconocido como uno de los principales contribuyentes a la teoría de análisis de datos y creación de infografías con un fundamento estadístico. Se grafican 6 variables: el número de tropas de Napoleón, la distancia, la temperatura, la latitud y la longitud, la dirección en que viajaban las tropas y la localización relativa a fechas específicas. La gráfica de Minard, como la describe E.J. Marey, parece “desafiar la pluma del historiador con su brutal elocuencia”, la combinación de datos del mapa, y la serie de tiempo, dibujados en 1869, “retratan una secuencia de pérdidas devastadoras que sufrieron las tropas de Napoleón en 1812”. Comienza en la izquierda, en la frontera de Polonia y Rusia, cerca del río Niemen. La línea gruesa dorada muestra el tamaño de la Gran Armada (422,000) en el momento en que invadía Rusia en junio de 1812. El ancho de esta banda indica el tamaño de la armada en cada punto del mapa. En septiembre, la armada llegó a Moscú, que ya había sido saqueada y dejada desértica, con sólo 100,000 hombres. El camino del retiro de Napoleón desde Moscú está representado por la línea oscuara (gris) que está en la parte inferior, que está relacionada a su vez con la temperatura y las fechas en el diagrama de abajo. Fue un invierno muy frío, y muchos se congelaron en su salida de Rusia. Como se muestra en el mapa, cruzar el río Berezina fue un desastre, y el ejército de Napoleón logró regresar a Polonia con tan sólo 10,000 hombres. También se muestran los movimientos de las tropas auxiliaries, que buscaban proteger por atrás y por la delantera mientras la armada avanzaba hacia Moscú. La gráfica de Minard cuenta una historia rica y cohesiva, coherente con datos multivariados y con los hechos históricos, y que puede ser más ilustrativa que tan sólo representar un número rebotando a lo largo del tiempo. Referencias "],
["introduccion-a-r-y-al-paquete-ggplot2.html", "Sección 2 Introducción a R y al paquete ggplot2", " Sección 2 Introducción a R y al paquete ggplot2 ¿Qué es R? R es un lenguaje de programación y un ambiente de cómputo estadístico R es software libre (no dice qué puedes o no hacer con el software), de código abierto (todo el código de R se puede inspeccionar - y se inspecciona). Cuando instalamos R, instala la base de R. Mucha de la funcionalidad adicional está en paquetes (conjunto de funciones y datos documentados) que la comunidad contribuye. ¿Cómo entender R? Hay una sesión de R corriendo. La consola de R es la interfaz entre R y nosotros. En la sesión hay objetos. Todo en R es un objeto: vectores, tablas, funciones, etc. Operamos aplicando funciones a los objetos y creando nuevos objetos. ¿Por qué R? R funciona en casi todas las plataformas (Mac, Windows, Linux e incluso en Playstation 3). R es un lenguaje de programación completo, permite desarrollo de DSLs. R promueve la investigación reproducible. R está actualizado gracias a que tiene una activa comunidad. Solo en CRAN hay cerca de 10,000 paquetes (funcionalidad adicional de R creadas creada por la comunidad). R se puede combinar con otras herramientas. R tiene capacidades gráficas muy sofisticadas. R es popular (Revolutions blog). "],
["r-primeros-pasos.html", "2.1 R: primeros pasos", " 2.1 R: primeros pasos Para comenzar se debe descargar R, esta descarga incluye R básico y un editor de textos para escribir código. Después de descargar R se recomienda descargar RStudio (gratis y libre). Rstudio es un ambiente de desarrollo integrado para R: incluye una consola, un editor de texto y un conjunto de herramientas para administrar el espacio de trabajo cuando se utiliza R. Algunos shortcuts útiles en RStudio son: En el editor command/ctrl + enter: enviar código a la consola ctrl + 2: mover el cursor a la consola En la consola flecha hacia arriba: recuperar comandos pasados ctrl + flecha hacia arriba: búsqueda en los comandos ctrl + 1: mover el cursor al editor R en análisis de datos El estándar científico para contestar preguntas o tomar decisiones es uno que se basa en el análisis de datos. Aquí consideramos técnicas cuantitativas: recolectar, organizar, entender, interpretar y extraer información de colecciones de datos predominantemente numéricos. Todas estas tareas son partes del análisis de datos, cuyo proceso podría resumirse con el siguiente diagrama: Es importante la forma en que nos movemos dentro de estos procesos en el análisis de datos y en este curso buscamos dar herramientas para facilitar cumplir los siguientes principios: Reproducibilidad. Debe ser posible reproducir el análisis en todos sus pasos, en cualquier momento. Claridad. Los pasos del análisis deben estar documentados apropiadamente, de manera que las decisiones importantes puedan ser entendidas y explicadas claramente. Dedicaremos las primeras sesiones a aprender herramientas básicas para poder movernos agilmente a lo largo de las etapas de análisis utilizando R y nos enfocaremos en los paquetes que forman parte del tidyverse. Paquetes y el Tidyverse La mejor manera de usar R para análisis de datos es aprovechando la gran cantidad de paquetes que aportan funcionalidad adicional. Desde Rstudio podemos instalar paquetes (Tools - &gt; Install packages o usar la función install.packages(&quot;nombre_paquete&quot;)). Una vez instalados, podemos cargarlos a nuestra sesión de R mediante library. Por ejemplo, para cargar el paquete readr hacemos: # print(read_csv) # Error in print(read_csv) : object &#39;read_csv&#39; not found library(tidyverse) print(read_csv) ## function (file, col_names = TRUE, col_types = NULL, locale = default_locale(), ## na = c(&quot;&quot;, &quot;NA&quot;), quoted_na = TRUE, quote = &quot;\\&quot;&quot;, comment = &quot;&quot;, ## trim_ws = TRUE, skip = 0, n_max = Inf, guess_max = min(1000, ## n_max), progress = show_progress()) ## { ## tokenizer &lt;- tokenizer_csv(na = na, quoted_na = TRUE, quote = quote, ## comment = comment, trim_ws = trim_ws) ## read_delimited(file, tokenizer, col_names = col_names, col_types = col_types, ## locale = locale, skip = skip, comment = comment, n_max = n_max, ## guess_max = guess_max, progress = progress) ## } ## &lt;bytecode: 0x739ac20&gt; ## &lt;environment: namespace:readr&gt; read_csv es una función que aporta el paquete readr, que a su vez está incluido en el tidyverse. Los paquetes se instalan una sola vez, sin embargo, se deben cargar (ejecutar library(tidyverse)) en cada sesión de R que los ocupemos. En estas notas utilizaremos la colección de paquetes incluídos en el tidyverse. Estos paquetes de R están diseñados para ciencia de datos, y para funcionar juntos como parte de un flujo de trabajo. La siguiente imagen tomada de Why the tidyverse (Joseph Rickert) indica que paquetes del tidyverse se utilizan para cada etapa del análisis de datos. knitr::include_graphics(&quot;imagenes/tidyverse.png&quot;) Recursos Existen muchos recursos gratuitos para aprender R, y resolver nuestras dudas, enlistamos algunos. Buscar ayuda: Google, StackOverflow. Para aprender más sobre un paquete o una función pueden visitar Rdocumentation.org. La referencia principal de estas notas es el libro R for Data Science de Hadley Wickham. Para aprender los comandos básicos de R Try R y Datacamp cuentan con excelentes cursos interactivos. Para aprender programación avanzada en R, el libro gratuito Advanced R de Hadley Wickham es una buena referencia. En particular es conveniente leer la guía de estilo (para todos: principiantes, intermedios y avanzados). Para mantenerse al tanto de las noticias de la comunidad de R pueden visitar R-bloggers. Más del tidyverse: Why the tidyverse Para aprovechar la funcionalidad de RStudio. "],
["visualizacion-con-ggplot2.html", "2.2 Visualización con ggplot2", " 2.2 Visualización con ggplot2 Utilizaremos el paquete ggplot2, fue desarrollado por Hadley Wickham y es una implementación de la gramática de las gráficas (Wilkinson et al. 2005). Gráficas de dispersión library(ggplot2) # Cargamos el paquete en nuestra sesión Usaremos el conjunto de datos mpg que se incluye en R, puedes encontrar información de esta base de datos tecleando ?mpg. data(mpg) ?mpg glimpse(mpg) ## Observations: 234 ## Variables: 11 ## $ manufacturer &lt;chr&gt; &quot;audi&quot;, &quot;audi&quot;, &quot;audi&quot;, &quot;audi&quot;, &quot;audi&quot;, &quot;audi&quot;, &quot;... ## $ model &lt;chr&gt; &quot;a4&quot;, &quot;a4&quot;, &quot;a4&quot;, &quot;a4&quot;, &quot;a4&quot;, &quot;a4&quot;, &quot;a4&quot;, &quot;a4 qua... ## $ displ &lt;dbl&gt; 1.8, 1.8, 2.0, 2.0, 2.8, 2.8, 3.1, 1.8, 1.8, 2.0,... ## $ year &lt;int&gt; 1999, 1999, 2008, 2008, 1999, 1999, 2008, 1999, 1... ## $ cyl &lt;int&gt; 4, 4, 4, 4, 6, 6, 6, 4, 4, 4, 4, 6, 6, 6, 6, 6, 6... ## $ trans &lt;chr&gt; &quot;auto(l5)&quot;, &quot;manual(m5)&quot;, &quot;manual(m6)&quot;, &quot;auto(av)... ## $ drv &lt;chr&gt; &quot;f&quot;, &quot;f&quot;, &quot;f&quot;, &quot;f&quot;, &quot;f&quot;, &quot;f&quot;, &quot;f&quot;, &quot;4&quot;, &quot;4&quot;, &quot;4&quot;,... ## $ cty &lt;int&gt; 18, 21, 20, 21, 16, 18, 18, 18, 16, 20, 19, 15, 1... ## $ hwy &lt;int&gt; 29, 29, 31, 30, 26, 26, 27, 26, 25, 28, 27, 25, 2... ## $ fl &lt;chr&gt; &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;,... ## $ class &lt;chr&gt; &quot;compact&quot;, &quot;compact&quot;, &quot;compact&quot;, &quot;compact&quot;, &quot;comp... Comencemos con nuestra primera gráfica: ggplot(data = mpg) + geom_point(mapping = aes(x = displ, y = hwy)) En ggplot2 se inicia una gráfica con la instrucción ggplot(), debemos especificar explicitamente que base de datos usamos, este es el primer argumento en la función ggplot. Una vez que creamos la base añadimos capas, y dentro de aes() escribimos las variables que queremos graficar y el atributo de la gráfica al que queremos mapearlas. La función geom_point() añade una capa de puntos, hay muchas funciones geometrías incluídas en ggplot2: geom_line(), geom_boxplot(), geom_histogram,… Cada una acepta distintos argumentos para mapear las variables en los datos a características estéticas de la gráfica. En el ejemplo de arriba mapeamos displ al eje x, hwy al eje y, pero geom_point() nos permite representar más variables usando la forma, color y/o tamaño del punto. Esta flexibilidad nos permite entender o descubrir patrones más interesantes en los datos. ggplot(mpg) + geom_point(aes(x = displ, y = hwy, color = class)) Experimenta con los aesthetics color (color), tamaño (size) y forma (shape).             ¿Qué diferencia hay entre las variables categóricas y las continuas?             ¿Qué ocurre cuando combinas varios aesthetics? El mapeo de las propiedades estéticas se denomina escalamiento y depende del tipo de variable, las variables discretas (por ejemplo, genero, escolaridad, país) se mapean a distintas escalas que las variables continuas (variables numéricas como edad, estatura, etc.), los defaults para algunos atributos son (los escalamientos se pueden modificar): aes Discreta Continua Color (color) Arcoiris de colores Gradiente de colores Tamaño (size) Escala discreta de tamaños Mapeo lineal entre el área y el valor Forma (shape) Distintas formas No aplica Transparencia (alpha) No aplica Mapeo lineal a la transparencia Los geoms controlan el tipo de gráfica p &lt;- ggplot(mpg, aes(x = displ, y = hwy)) p + geom_line() # en este caso no es una buena gráfica ¿Qué problema tiene la siguiente gráfica? p &lt;- ggplot(mpg, aes(x = cty, y = hwy)) p + geom_point() p + geom_jitter() ¿Cómo podemos mejorar la siguiente gráfica? ggplot(mpg, aes(x = class, y = hwy)) + geom_point() Intentemos reodenar los niveles de la variable clase ggplot(mpg, aes(x = reorder(class, hwy), y = hwy)) + geom_point() Podemos probar otros geoms. ggplot(mpg, aes(x = reorder(class, hwy), y = hwy)) + geom_jitter() ggplot(mpg, aes(x = reorder(class, hwy), y = hwy)) + geom_boxplot() También podemos usar más de un geom! ggplot(mpg, aes(x = reorder(class, hwy), y = hwy)) + geom_jitter() + geom_boxplot() Lee la ayuda de reorder y repite las gráficas anteriores ordenando por la mediana de hwy.             ¿Cómo harías para graficar los puntos encima de las cajas de boxplot? Paneles Veamos ahora como hacer páneles de gráficas, la idea es hacer varios múltiplos de una gráfica donde cada múltiplo representa un subconjunto de los datos, es una práctica muy útil para explorar relaciones condicionales. En ggplot podemos usar facet_wrap() para hacer paneles dividiendo los datos de acuerdo a las categorías de una sola variable ggplot(mpg, aes(x = displ, y = hwy)) + geom_jitter() + facet_wrap(~ cyl) También podemos hacer una cuadrícula de 2 dimensiones usando facet_grid(filas~columnas) ggplot(mpg, aes(x = displ, y = hwy)) + geom_jitter() + facet_grid(.~ class) ggplot(mpg, aes(x = displ, y = hwy)) + geom_jitter() + facet_grid(drv ~ class) Los páneles pueden ser muy útiles para entender relaciones en nuestros datos. En la siguiente gráfica es difícil entender si existe una relación entre radiación solar y ozono. data(airquality) ggplot(airquality, aes(x = Solar.R, y = Ozone)) + geom_point() ## Warning: Removed 42 rows containing missing values (geom_point). Veamos que ocurre si realizamos páneles separando por velocidad del viento. library(Hmisc) airquality$Wind.cat &lt;- cut2(airquality$Wind, g = 3) ggplot(airquality, aes(x = Solar.R, y = Ozone)) + geom_point() + facet_wrap(~ Wind.cat) Podemos agregar un suavizador (loess) para ver mejor la relación de las variables en cada panel. ggplot(airquality, aes(x = Solar.R, y = Ozone)) + geom_point() + facet_wrap(~ Wind.cat) + geom_smooth(method = &quot;lm&quot;) Escribe algunas preguntas que puedan contestar con estos datos. En ocasiones es necesario realizar transformaciones u obtener subconjuntos de los datos para poder responder preguntas de nuestro interés. library(dplyr) library(babynames) glimpse(babynames) ## Observations: 1,858,689 ## Variables: 5 ## $ year &lt;dbl&gt; 1880, 1880, 1880, 1880, 1880, 1880, 1880, 1880, 1880, 188... ## $ sex &lt;chr&gt; &quot;F&quot;, &quot;F&quot;, &quot;F&quot;, &quot;F&quot;, &quot;F&quot;, &quot;F&quot;, &quot;F&quot;, &quot;F&quot;, &quot;F&quot;, &quot;F&quot;, &quot;F&quot;, &quot;F... ## $ name &lt;chr&gt; &quot;Mary&quot;, &quot;Anna&quot;, &quot;Emma&quot;, &quot;Elizabeth&quot;, &quot;Minnie&quot;, &quot;Margaret&quot;... ## $ n &lt;int&gt; 7065, 2604, 2003, 1939, 1746, 1578, 1472, 1414, 1320, 128... ## $ prop &lt;dbl&gt; 0.072384329, 0.026679234, 0.020521700, 0.019865989, 0.017... Supongamos que queremos ver la tendencia del nombre “John”, para ello debemos generar un subconjunto de la base de datos. ¿Qué ocurre en la siguiente gráfica? babynames_John &lt;- filter(babynames, name == &quot;John&quot;) ggplot(babynames_John, aes(x = year, y = prop)) + geom_point() ggplot(babynames_John, aes(x = year, y = prop, color = sex)) + geom_line() La preparación de los datos es un aspecto muy importante del análisis y suele ser la fase que lleva más tiempo. Es por ello que el siguiente tema se enfocará en herramientas para hacer transformaciones de manera eficiente. Tarea. Explora la base de datos gapminder, estos datos están incluidos en el paquete del mismo nombre, para acceder a ellos basta con cargar el paquete: # install.packages(&quot;gapminder&quot;) library(gapminder) gapminder ## # A tibble: 1,704 x 6 ## country continent year lifeExp pop gdpPercap ## &lt;fct&gt; &lt;fct&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; ## 1 Afghanistan Asia 1952 28.8 8425333 779. ## 2 Afghanistan Asia 1957 30.3 9240934 821. ## 3 Afghanistan Asia 1962 32.0 10267083 853. ## 4 Afghanistan Asia 1967 34.0 11537966 836. ## 5 Afghanistan Asia 1972 36.1 13079460 740. ## 6 Afghanistan Asia 1977 38.4 14880372 786. ## 7 Afghanistan Asia 1982 39.9 12881816 978. ## 8 Afghanistan Asia 1987 40.8 13867957 852. ## 9 Afghanistan Asia 1992 41.7 16317921 649. ## 10 Afghanistan Asia 1997 41.8 22227415 635. ## # ... with 1,694 more rows             realiza al menos 3 gráficas y explica las relaciones que encuentres. Debes usar lo que revisamos en estas notas: al menos una de las gráficas debe ser de páneles, realiza una gráfica con datos de México, y (opcional)si lo consideras interesante, puedes crear una variable categórica utilizando la función cut2 del paquete Hmisc. Recursos Google, stackoverflow. Para aprender más de ggplot pueden ver la documentación con ejemplos en la página de ggplot2. Otro recurso muy útil es el acordeón de ggplot. Referencias "],
["manipulacion-y-agrupacion-de-datos.html", "Sección 3 Manipulación y agrupación de datos", " Sección 3 Manipulación y agrupación de datos En esta sección continuamos con la introducción a R para análisis de datos, en particular mostraremos herramientas de manipulación y transformación de datos. Trataremos los siguientes puntos: Estrategia separa-aplica-combina. Reestructura de datos y el principio de los datos limpios. Es sabido que limpieza y preparación de datos ocupan gran parte del tiempo del análisis de datos (Dasu y Johnson, 2003 y NYT’s ‘Janitor Work’ Is Key Hurdle to Insights), es por ello que vale la pena dedicar un tiempo a aprender técnicas que faciliten estas tareas, y entender que estructura en los datos es más conveniente para trabajar. El material de la clase se puede descargar de aquí "],
["transformacion-de-datos.html", "3.1 Transformación de datos", " 3.1 Transformación de datos Separa-aplica-combina (split-apply-combine) Muchos problemas de análisis de datos involucran la aplicación de la estrategia separa-aplica-combina, (Hadley Whickam, 2011) esta consiste en romper un problema en pedazos (de acuerdo a una variable de interés), operar sobre cada subconjunto de manera independiente (ej. calcular la media de cada grupo, ordenar observaciones por grupo, estandarizar por grupo) y después unir los pedazos nuevamente. El siguiente diagrama ejemplifiaca el paradigma de divide-aplica-combina: Separa la base de datos original. Aplica funciones a cada subconjunto. Combina los resultados en una nueva base de datos. Ahora, cuando pensamos como implementar la estrategia divide-aplica-combina es natural pensar en iteraciones, por ejemplo utilizar un ciclo for para recorrer cada grupo de interés y aplicar las funciones, sin embargo la aplicación de ciclos for desemboca en código difícil de entender por lo que preferimos trabajar con funciones creadas para estas tareas, usaremos el paquete dplyr que además de ser más claro suele ser más veloz. Estudiaremos las siguientes funciones: filter: obten un subconjunto de las filas de acuerdo a un criterio. select: selecciona columnas de acuerdo al nombre arrange: reordena las filas mutate: agrega nuevas variables summarise: reduce variables a valores (crear nuevas bases de datos con resúmenes de variables de la base original) Estas funciones trabajan de manera similar, el primer argumento que reciben es un data frame, los argumentos que siguen indican que operación se va a efectuar y el resultado es un nuevo data frame. Adicionalmente, se pueden usar con group_by que cambia el dominio de cada función, pasando de operar en el conjunto de datos completos a operar en grupos, esto lo veremos más adelante. Ejemplos y lectura de datos En esta sección trabajaremos con bases de datos de vuelos del aeropuerto de Houston. Comenzamos importando los datos a R. Para leer los datos usamos funciones del paquete readr que forma parte del tidyverse, notemos que si estamos usando RStudio podemos generar los comandos de lectura de datos usando la opción Import Dataset en la ventana de Environment. Si usamos la opción de importar datos usando la funcionalidad point-and-click de RStudio, es importante copiar los comandos al script de R para no perder reproducibilidad. library(tidyverse) flights &lt;- read_csv(&quot;data/flights.csv&quot;) ## Parsed with column specification: ## cols( ## date = col_datetime(format = &quot;&quot;), ## hour = col_integer(), ## minute = col_integer(), ## dep = col_integer(), ## arr = col_integer(), ## dep_delay = col_integer(), ## arr_delay = col_integer(), ## carrier = col_character(), ## flight = col_integer(), ## dest = col_character(), ## plane = col_character(), ## cancelled = col_integer(), ## time = col_integer(), ## dist = col_integer() ## ) flights ## # A tibble: 227,496 x 14 ## date hour minute dep arr dep_delay arr_delay carrier ## &lt;dttm&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; ## 1 2011-01-01 12:00:00 14 0 1400 1500 0 -10 AA ## 2 2011-01-02 12:00:00 14 1 1401 1501 1 -9 AA ## 3 2011-01-03 12:00:00 13 52 1352 1502 -8 -8 AA ## 4 2011-01-04 12:00:00 14 3 1403 1513 3 3 AA ## 5 2011-01-05 12:00:00 14 5 1405 1507 5 -3 AA ## 6 2011-01-06 12:00:00 13 59 1359 1503 -1 -7 AA ## 7 2011-01-07 12:00:00 13 59 1359 1509 -1 -1 AA ## 8 2011-01-08 12:00:00 13 55 1355 1454 -5 -16 AA ## 9 2011-01-09 12:00:00 14 43 1443 1554 43 44 AA ## 10 2011-01-10 12:00:00 14 43 1443 1553 43 43 AA ## # ... with 227,486 more rows, and 6 more variables: flight &lt;int&gt;, ## # dest &lt;chr&gt;, plane &lt;chr&gt;, cancelled &lt;int&gt;, time &lt;int&gt;, dist &lt;int&gt; weather &lt;- read_csv(&quot;data/weather.csv&quot;) ## Parsed with column specification: ## cols( ## date = col_date(format = &quot;&quot;), ## hour = col_integer(), ## temp = col_double(), ## dew_point = col_double(), ## humidity = col_integer(), ## pressure = col_double(), ## visibility = col_double(), ## wind_dir = col_character(), ## wind_dir2 = col_integer(), ## wind_speed = col_double(), ## gust_speed = col_double(), ## precip = col_double(), ## conditions = col_character(), ## events = col_character() ## ) weather ## # A tibble: 8,723 x 14 ## date hour temp dew_point humidity pressure visibility wind_dir ## &lt;date&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 2011-01-01 0 59 28.9 32 29.9 10 NNE ## 2 2011-01-01 1 57.2 28.4 33 29.9 10 NNE ## 3 2011-01-01 2 55.4 28.4 36 29.9 10 NNW ## 4 2011-01-01 3 53.6 28.4 38 29.9 10 North ## 5 2011-01-01 4 NA NA NA 30.0 10 NNW ## 6 2011-01-01 5 NA NA NA 30.0 10 North ## 7 2011-01-01 6 53.1 17.1 24 30.0 10 North ## 8 2011-01-01 7 53.1 16 23 30.1 10 North ## 9 2011-01-01 8 54 18 24 30.1 10 North ## 10 2011-01-01 9 55.4 17.6 23 30.1 10 NNE ## # ... with 8,713 more rows, and 6 more variables: wind_dir2 &lt;int&gt;, ## # wind_speed &lt;dbl&gt;, gust_speed &lt;dbl&gt;, precip &lt;dbl&gt;, conditions &lt;chr&gt;, ## # events &lt;chr&gt; planes &lt;- read_csv(&quot;data/planes.csv&quot;) ## Parsed with column specification: ## cols( ## plane = col_character(), ## year = col_integer(), ## mfr = col_character(), ## model = col_character(), ## no.eng = col_integer(), ## no.seats = col_integer(), ## speed = col_integer(), ## engine = col_character(), ## type = col_character() ## ) planes ## # A tibble: 2,853 x 9 ## plane year mfr model no.eng no.seats speed engine type ## &lt;chr&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; ## 1 N576AA 1991 MCDONNEL… DC-9-8… 2 172 NA Turbo-… Fixed win… ## 2 N557AA 1993 MARZ BAR… KITFOX… 1 2 NA Recipr… Fixed win… ## 3 N403AA 1974 RAVEN S55A NA 1 60 None Balloon ## 4 N492AA 1989 MCDONNEL… DC-9-8… 2 172 NA Turbo-… Fixed win… ## 5 N262AA 1985 MCDONNEL… DC-9-8… 2 172 NA Turbo-… Fixed win… ## 6 N493AA 1989 MCDONNEL… DC-9-8… 2 172 NA Turbo-… Fixed win… ## 7 N477AA 1988 MCDONNEL… DC-9-8… 2 172 NA Turbo-… Fixed win… ## 8 N476AA 1988 MCDONNEL… DC-9-8… 2 172 NA Turbo-… Fixed win… ## 9 N504AA NA AUTHIER … TIERRA… 1 2 NA Recipr… Fixed win… ## 10 N565AA 1987 MCDONNEL… DC-9-8… 2 172 NA Turbo-… Fixed win… ## # ... with 2,843 more rows airports &lt;- read_csv(&quot;data/airports.csv&quot;) ## Parsed with column specification: ## cols( ## iata = col_character(), ## airport = col_character(), ## city = col_character(), ## state = col_character(), ## country = col_character(), ## lat = col_double(), ## long = col_double() ## ) airports ## # A tibble: 3,376 x 7 ## iata airport city state country lat long ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 00M Thigpen Bay Springs MS USA 32.0 -89.2 ## 2 00R Livingston Municipal Livingston TX USA 30.7 -95.0 ## 3 00V Meadow Lake Colorado Springs CO USA 38.9 -105. ## 4 01G Perry-Warsaw Perry NY USA 42.7 -78.1 ## 5 01J Hilliard Airpark Hilliard FL USA 30.7 -81.9 ## 6 01M Tishomingo County Belmont MS USA 34.5 -88.2 ## 7 02A Gragg-Wade Clanton AL USA 32.9 -86.6 ## 8 02C Capitol Brookfield WI USA 43.1 -88.2 ## 9 02G Columbiana County East Liverpool OH USA 40.7 -80.6 ## 10 03D Memphis Memorial Memphis MO USA 40.4 -92.2 ## # ... with 3,366 more rows Filtrar Creamos una base de datos de juguete para mostrar el funcionamiento de cada instrucción: df_ej &lt;- tibble(genero = c(&quot;mujer&quot;, &quot;hombre&quot;, &quot;mujer&quot;, &quot;mujer&quot;, &quot;hombre&quot;), estatura = c(1.65, 1.80, 1.70, 1.60, 1.67)) df_ej ## # A tibble: 5 x 2 ## genero estatura ## &lt;chr&gt; &lt;dbl&gt; ## 1 mujer 1.65 ## 2 hombre 1.8 ## 3 mujer 1.7 ## 4 mujer 1.6 ## 5 hombre 1.67 El primer argumento de filter() es el nombre del data frame, los subsecuentes son las expresiones que indican que filas filtrar. filter(df_ej, genero == &quot;mujer&quot;) ## # A tibble: 3 x 2 ## genero estatura ## &lt;chr&gt; &lt;dbl&gt; ## 1 mujer 1.65 ## 2 mujer 1.7 ## 3 mujer 1.6 filter(df_ej, estatura &gt; 1.65 &amp; estatura &lt; 1.75) ## # A tibble: 2 x 2 ## genero estatura ## &lt;chr&gt; &lt;dbl&gt; ## 1 mujer 1.7 ## 2 hombre 1.67 Algunos operadores importantes para filtrar son: x &gt; 1 x &gt;= 1 x &lt; 1 x &lt;= 1 x != 1 x == 1 x %in% c(&quot;a&quot;, &quot;b&quot;) Debemos tener cuidado al usar == sqrt(2) ^ 2 == 2 ## [1] FALSE 1/49 * 49 == 1 ## [1] FALSE Los resultados de arriba se deben a que las computadoras usan aritmética de precisión finita: print(1/49 * 49, digits = 20) ## [1] 0.99999999999999988898 Para estos casos es útil usar la función near() near(sqrt(2) ^ 2, 2) ## [1] TRUE near(1 / 49 * 49, 1) ## [1] TRUE Los operadores booleanos también son convenientes para filtrar: # Conjuntos a | b a &amp; b a &amp; !b xor(a, b) El siguiente esquema nos ayuda a entender que hace cada operación: knitr::include_graphics(&quot;imagenes/transform-logical.png&quot;) Encuentra todos los vuelos hacia SFO ó OAK.             Los vuelos con un retraso mayor a una hora.             En los que el retraso de llegada es más del doble que el retraso de salida. Seleccionar Elegir columnas de un conjunto de datos. df_ej ## # A tibble: 5 x 2 ## genero estatura ## &lt;chr&gt; &lt;dbl&gt; ## 1 mujer 1.65 ## 2 hombre 1.8 ## 3 mujer 1.7 ## 4 mujer 1.6 ## 5 hombre 1.67 select(df_ej, genero) ## # A tibble: 5 x 1 ## genero ## &lt;chr&gt; ## 1 mujer ## 2 hombre ## 3 mujer ## 4 mujer ## 5 hombre select(df_ej, -genero) ## # A tibble: 5 x 1 ## estatura ## &lt;dbl&gt; ## 1 1.65 ## 2 1.8 ## 3 1.7 ## 4 1.6 ## 5 1.67 select(df_ej, starts_with(&quot;g&quot;)) select(df_ej, contains(&quot;g&quot;)) Ve la ayuda de select (?select) y escribe tres maneras de seleccionar las variables de retraso (delay). Ordenar Ordenar de acuerdo al valor de una o más variables: arrange(df_ej, genero) ## # A tibble: 5 x 2 ## genero estatura ## &lt;chr&gt; &lt;dbl&gt; ## 1 hombre 1.8 ## 2 hombre 1.67 ## 3 mujer 1.65 ## 4 mujer 1.7 ## 5 mujer 1.6 arrange(df_ej, desc(estatura)) ## # A tibble: 5 x 2 ## genero estatura ## &lt;chr&gt; &lt;dbl&gt; ## 1 hombre 1.8 ## 2 mujer 1.7 ## 3 hombre 1.67 ## 4 mujer 1.65 ## 5 mujer 1.6 Ordena los vuelos por fecha de salida y hora.             ¿Cuáles son los vuelos con mayor retraso?             ¿Qué vuelos ganaron más tiempo en el aire? Mutar Mutar consiste en crear nuevas variables aplicando una función a columnas existentes: mutate(df_ej, estatura_cm = estatura * 100) ## # A tibble: 5 x 3 ## genero estatura estatura_cm ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 mujer 1.65 165 ## 2 hombre 1.8 180 ## 3 mujer 1.7 170 ## 4 mujer 1.6 160 ## 5 hombre 1.67 167 mutate(df_ej, estatura_cm = estatura * 100, estatura_in = estatura_cm * 0.3937) ## # A tibble: 5 x 4 ## genero estatura estatura_cm estatura_in ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 mujer 1.65 165 65.0 ## 2 hombre 1.8 180 70.9 ## 3 mujer 1.7 170 66.9 ## 4 mujer 1.6 160 63.0 ## 5 hombre 1.67 167 65.7 Calcula la velocidad en millas por hora a partir de la variable tiempo y la distancia (en millas). ¿Quá vuelo fue el más rápido?             Crea una nueva variable que muestre cuánto tiempo se ganó o perdió durante el vuelo. Hay muchas funciones que podemos usar para crear nuevas variables con mutate(), éstas deben cumplir ser funciones vectorizadas, es decir, reciben un vector de valores y devuelven un vector de la misma dimensión. Summarise y resúmenes por grupo Summarise sirve para crear nuevas bases de datos con resúmenes o agregaciones de los datos originales. summarise(df_ej, promedio = mean(estatura)) ## # A tibble: 1 x 1 ## promedio ## &lt;dbl&gt; ## 1 1.68 Podemos hacer resúmenes por grupo, primero creamos una base de datos agrupada: by_genero &lt;- group_by(df_ej, genero) by_genero ## # A tibble: 5 x 2 ## # Groups: genero [2] ## genero estatura ## &lt;chr&gt; &lt;dbl&gt; ## 1 mujer 1.65 ## 2 hombre 1.8 ## 3 mujer 1.7 ## 4 mujer 1.6 ## 5 hombre 1.67 y después operamos sobre cada grupo, creando un resumen a nivel grupo y uniendo los subconjuntos en una base nueva: summarise(by_genero, promedio = mean(estatura)) ## # A tibble: 2 x 2 ## genero promedio ## &lt;chr&gt; &lt;dbl&gt; ## 1 hombre 1.74 ## 2 mujer 1.65 Calcula el retraso promedio por fecha.             ¿Qué otros resúmenes puedes hacer para explorar el retraso por fecha? Algunas funciones útiles con summarise son min(x), median(x), max(x), quantile(x, p), n(), sum(x), sum(x &gt; 1), mean(x &gt; 1), sd(x). flights$date_only &lt;- as.Date(flights$date) by_date &lt;- group_by(flights, date_only) no_miss &lt;- filter(by_date, !is.na(dep)) delays &lt;- summarise(no_miss, mean_delay = mean(dep_delay), n = n()) Operador pipeline En R cuando uno hace varias operaciones es difícil leer y entender el código: hourly_delay &lt;- filter(summarise(group_by(filter(flights, !is.na(dep_delay)), date_only, hour), delay = mean(dep_delay), n = n()), n &gt; 10) La dificultad radica en que usualmente los parámetros se asignan después del nombre de la función usando (). El operador Forward Pipe (%&gt;%) cambia este orden, de manera que un parámetro que precede a la función es enviado (&quot;piped&quot;) a la función:x %&gt;% f(y)se vuelvef(x,y),x %&gt;% f(y) %&gt;% g(z)se vuelveg(f(x, y), z)`. Es así que podemos reescribir el código para poder leer las operaciones que vamos aplicando de izquierda a derecha y de arriba hacia abajo. Veamos como cambia el código anterior: hourly_delay &lt;- flights %&gt;% filter(!is.na(dep_delay)) %&gt;% group_by(date_only, hour) %&gt;% summarise(delay = mean(dep_delay), n = n()) %&gt;% filter(n &gt; 10) podemos leer %&gt;% como “después”. ¿Qué destinos tienen el promedio de retrasos más alto?             ¿Qué vuelos (compañía + vuelo) ocurren diario?             En promedio, ¿Cómo varían a lo largo del día los retrasos de vuelos no cancelados? (pista: hour + minute / 60) Variables por grupo En ocasiones es conveniente crear variables por grupo, por ejemplo estandarizar dentro de cada grupo z = (x - mean(x)) / sd(x). Veamos un ejemplo: planes &lt;- flights %&gt;% filter(!is.na(arr_delay)) %&gt;% group_by(plane) %&gt;% filter(n() &gt; 30) planes %&gt;% mutate(z_delay = (arr_delay - mean(arr_delay)) / sd(arr_delay)) %&gt;% filter(z_delay &gt; 5) ## # A tibble: 1,403 x 16 ## # Groups: plane [856] ## date hour minute dep arr dep_delay arr_delay carrier ## &lt;dttm&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; ## 1 2011-01-28 12:00:00 15 16 1516 1916 351 326 CO ## 2 2011-01-27 12:00:00 18 22 1822 1945 234 210 CO ## 3 2011-01-27 12:00:00 21 37 2137 2254 242 219 CO ## 4 2011-01-27 12:00:00 0 11 11 216 168 137 CO ## 5 2011-01-27 12:00:00 22 37 2237 153 227 208 CO ## 6 2011-01-27 12:00:00 21 28 2128 136 231 216 CO ## 7 2011-01-26 12:00:00 11 46 1146 1633 171 193 CO ## 8 2011-01-26 12:00:00 9 49 949 1436 144 180 CO ## 9 2011-01-21 12:00:00 19 11 1911 2352 94 112 CO ## 10 2011-01-20 12:00:00 6 35 635 807 780 775 CO ## # ... with 1,393 more rows, and 8 more variables: flight &lt;int&gt;, ## # dest &lt;chr&gt;, plane &lt;chr&gt;, cancelled &lt;int&gt;, time &lt;int&gt;, dist &lt;int&gt;, ## # date_only &lt;date&gt;, z_delay &lt;dbl&gt; Verbos de dos tablas ¿Cómo mostramos los retrasos de los vuelos en un mapa? Para responder esta pregunta necesitamos unir la base de datos de vuelos con la de aeropuertos. location &lt;- airports %&gt;% select(dest = iata, name = airport, lat, long) flights %&gt;% group_by(dest) %&gt;% filter(!is.na(arr_delay)) %&gt;% summarise( arr_delay = mean(arr_delay), n = n() ) %&gt;% arrange(desc(arr_delay)) %&gt;% left_join(location) ## Joining, by = &quot;dest&quot; ## # A tibble: 116 x 6 ## dest arr_delay n name lat long ## &lt;chr&gt; &lt;dbl&gt; &lt;int&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 ANC 26.1 124 Ted Stevens Anchorage International 61.2 -150. ## 2 CID 17.8 406 Eastern Iowa 41.9 -91.7 ## 3 DSM 16.0 634 Des Moines International 41.5 -93.7 ## 4 SFO 14.9 2800 San Francisco International 37.6 -122. ## 5 BPT 14.3 3 Southeast Texas Regional 30.0 -94.0 ## 6 GRR 13.7 665 Kent County International 42.9 -85.5 ## 7 DAY 13.7 444 James M Cox Dayton Intl 39.9 -84.2 ## 8 VPS 12.5 864 Eglin Air Force Base 30.5 -86.5 ## 9 ECP 12.4 720 &lt;NA&gt; NA NA ## 10 SAV 12.3 851 Savannah International 32.1 -81.2 ## # ... with 106 more rows Hay varias maneras de unir dos bases de datos y debemos pensar en el obejtivo: x &lt;- tibble(name = c(&quot;John&quot;, &quot;Paul&quot;, &quot;George&quot;, &quot;Ringo&quot;, &quot;Stuart&quot;, &quot;Pete&quot;), instrument = c(&quot;guitar&quot;, &quot;bass&quot;, &quot;guitar&quot;, &quot;drums&quot;, &quot;bass&quot;, &quot;drums&quot;)) y &lt;- tibble(name = c(&quot;John&quot;, &quot;Paul&quot;, &quot;George&quot;, &quot;Ringo&quot;, &quot;Brian&quot;), band = c(&quot;TRUE&quot;, &quot;TRUE&quot;, &quot;TRUE&quot;, &quot;TRUE&quot;, &quot;FALSE&quot;)) x ## # A tibble: 6 x 2 ## name instrument ## &lt;chr&gt; &lt;chr&gt; ## 1 John guitar ## 2 Paul bass ## 3 George guitar ## 4 Ringo drums ## 5 Stuart bass ## 6 Pete drums y ## # A tibble: 5 x 2 ## name band ## &lt;chr&gt; &lt;chr&gt; ## 1 John TRUE ## 2 Paul TRUE ## 3 George TRUE ## 4 Ringo TRUE ## 5 Brian FALSE inner_join(x, y) ## Joining, by = &quot;name&quot; ## # A tibble: 4 x 3 ## name instrument band ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 John guitar TRUE ## 2 Paul bass TRUE ## 3 George guitar TRUE ## 4 Ringo drums TRUE left_join(x, y) ## Joining, by = &quot;name&quot; ## # A tibble: 6 x 3 ## name instrument band ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 John guitar TRUE ## 2 Paul bass TRUE ## 3 George guitar TRUE ## 4 Ringo drums TRUE ## 5 Stuart bass &lt;NA&gt; ## 6 Pete drums &lt;NA&gt; semi_join(x, y) ## Joining, by = &quot;name&quot; ## # A tibble: 4 x 2 ## name instrument ## &lt;chr&gt; &lt;chr&gt; ## 1 John guitar ## 2 Paul bass ## 3 George guitar ## 4 Ringo drums anti_join(x, y) ## Joining, by = &quot;name&quot; ## # A tibble: 2 x 2 ## name instrument ## &lt;chr&gt; &lt;chr&gt; ## 1 Stuart bass ## 2 Pete drums Resumamos lo que observamos arriba: Tipo Acción inner Incluye únicamente las filas que aparecen tanto en x como en y left Incluye todas las filas en x y las filas de y que coincidan semi Incluye las filas de x que coincidan con y anti Incluye las filas de x que no coinciden con y Ahora combinamos datos a nivel hora con condiciones climáticas, ¿cuál es el tipo de unión adecuado? hourly_delay &lt;- flights %&gt;% group_by(date_only, hour) %&gt;% filter(!is.na(dep_delay)) %&gt;% summarise( delay = mean(dep_delay), n = n() ) %&gt;% filter(n &gt; 10) delay_weather &lt;- hourly_delay %&gt;% left_join(weather) ## Joining, by = &quot;hour&quot; arrange(delay_weather, -delay) ## # A tibble: 2,091,842 x 17 ## # Groups: date_only [365] ## date_only hour delay n date temp dew_point humidity ## &lt;date&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;date&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; ## 1 2011-05-12 23 184. 33 2011-01-02 43 28.9 58 ## 2 2011-05-12 23 184. 33 2011-01-03 39 27 62 ## 3 2011-05-12 23 184. 33 2011-01-04 50 45 83 ## 4 2011-05-12 23 184. 33 2011-01-05 62.6 60.8 94 ## 5 2011-05-12 23 184. 33 2011-01-06 53.1 36 52 ## 6 2011-05-12 23 184. 33 2011-01-07 46.9 36 66 ## 7 2011-05-12 23 184. 33 2011-01-08 50 43 77 ## 8 2011-05-12 23 184. 33 2011-01-09 53.1 30 41 ## 9 2011-05-12 23 184. 33 2011-01-10 41 37 86 ## 10 2011-05-12 23 184. 33 2011-01-11 39.9 32 73 ## # ... with 2,091,832 more rows, and 9 more variables: pressure &lt;dbl&gt;, ## # visibility &lt;dbl&gt;, wind_dir &lt;chr&gt;, wind_dir2 &lt;int&gt;, wind_speed &lt;dbl&gt;, ## # gust_speed &lt;dbl&gt;, precip &lt;dbl&gt;, conditions &lt;chr&gt;, events &lt;chr&gt; ¿Qué condiciones climáticas están asociadas con retrasos en las salidas de Houston?             Explora si los aviones más viejos están asociados a mayores retrasos, responde con una gráfica. "],
["datos-limpios.html", "3.2 Datos limpios", " 3.2 Datos limpios Una vez que importamos datos a R es conveniente limpiarlos, esto implica almacenarlos de una manera consisistente que nos permita enfocarnos en responder preguntas de los datos en lugar de estar luchando con los datos. Entonces, datos limpios son datos que facilitan las tareas del análisis de datos: Visualización: Resúmenes de datos usando gráficas, análisis exploratorio, o presentación de resultados. Manipulación: Manipulación de variables como agregar, filtrar, reordenar, transformar. Modelación: Ajustar modelos es sencillo si los datos están en la forma correcta. Los principios de datos limpios (Tidy Data de Hadley Wickham) proveen una manera estándar de organizar la información: Cada variable forma una columna. Cada observación forma un renglón. Cada tipo de unidad observacional forma una tabla. Vale la pena notar que los principios de los datos limpios se pueden ver como teoría de algebra relacional para estadísticos, estós principios equivalen a la tercera forma normal de Codd con enfoque en una sola tabla de datos en lugar de muchas conectadas en bases de datos relacionales. Veamos un ejemplo: La mayor parte de las bases de datos en estadística tienen forma rectangular, ¿cuántas variables tiene la siguiente tabla? tratamientoA tratamientoB Juan Aguirre - 2 Ana Bernal 16 11 José López 3 1 La tabla anterior también se puede estructurar de la siguiente manera: Juan Aguirre Ana Bernal José López tratamientoA - 16 3 tratamientoB 2 11 1 Si vemos los principios (cada variable forma una columna, cada observación forma un renglón, cada tipo de unidad observacional forma una tabla), ¿las tablas anteriores cumplen los principios? Para responder la pregunta identifiquemos primero cuáles son las variables y cuáles las observaciones de esta pequeña base. Las variables son: persona/nombre, tratamiento y resultado. Entonces, siguiendo los principios de datos limpios obtenemos la siguiente estructura: nombre tratamiento resultado Juan Aguirre a - Ana Bernal a 16 José López a 3 Juan Aguirre b 2 Ana Bernal b 11 José López b 1 Limpieza bases de datos Los principios de los datos limpios parecen obvios pero la mayor parte de los datos no los cumplen debido a: La mayor parte de la gente no está familiarizada con los principios y es difícil derivarlos por uno mismo. Los datos suelen estar organizados para facilitar otros aspectos que no son análisis, por ejemplo, la captura. Algunos de los problemas más comunes en las bases de datos que no están limpias son: Los encabezados de las columnas son valores y no nombres de variables. Más de una variable por columna. Las variables están organizadas tanto en filas como en columnas. Más de un tipo de observación en una tabla. Una misma unidad observacional está almacenada en múltiples tablas. La mayor parte de estos problemas se pueden arreglar con pocas herramientas, a continuación veremos como limpiar datos usando 2 funciones del paquete tidyr: gather: recibe múltiples columnas y las junta en pares de valores y nombres, convierte los datos anchos en largos. spread: recibe 2 columnas y las separa, haciendo los datos más anchos. Repasaremos los problemas más comunes que se encuentran en conjuntos de datos sucios y mostraremos como se puede manipular la tabla de datos (usando las funciones gather y spread) con el fin de estructurarla para que cumpla los principios de datos limpios. 1. Los encabezados de las columanas son valores Usaremos ejemplos para entender los conceptos más facilmente. La primer base de datos está basada en una encuesta de Pew Research que investiga la relación entre ingreso y afiliación religiosa. ¿Cuáles son las variables en estos datos? library(tidyverse) pew &lt;- read_delim(&quot;http://stat405.had.co.nz/data/pew.txt&quot;, &quot;\\t&quot;, escape_double = FALSE, trim_ws = TRUE) ## Parsed with column specification: ## cols( ## religion = col_character(), ## `&lt;$10k` = col_integer(), ## `$10-20k` = col_integer(), ## `$20-30k` = col_integer(), ## `$30-40k` = col_integer(), ## `$40-50k` = col_integer(), ## `$50-75k` = col_integer(), ## `$75-100k` = col_integer(), ## `$100-150k` = col_integer(), ## `&gt;150k` = col_integer(), ## `Don&#39;t know/refused` = col_integer() ## ) pew ## # A tibble: 18 x 11 ## religion `&lt;$10k` `$10-20k` `$20-30k` `$30-40k` `$40-50k` `$50-75k` ## &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 Agnostic 27 34 60 81 76 137 ## 2 Atheist 12 27 37 52 35 70 ## 3 Buddhist 27 21 30 34 33 58 ## 4 Catholic 418 617 732 670 638 1116 ## 5 Don’t k… 15 14 15 11 10 35 ## 6 Evangel… 575 869 1064 982 881 1486 ## 7 Hindu 1 9 7 9 11 34 ## 8 Histori… 228 244 236 238 197 223 ## 9 Jehovah… 20 27 24 24 21 30 ## 10 Jewish 19 19 25 25 30 95 ## 11 Mainlin… 289 495 619 655 651 1107 ## 12 Mormon 29 40 48 51 56 112 ## 13 Muslim 6 7 9 10 9 23 ## 14 Orthodox 13 17 23 32 32 47 ## 15 Other C… 9 7 11 13 13 14 ## 16 Other F… 20 33 40 46 49 63 ## 17 Other W… 5 2 3 4 2 7 ## 18 Unaffil… 217 299 374 365 341 528 ## # ... with 4 more variables: `$75-100k` &lt;int&gt;, `$100-150k` &lt;int&gt;, ## # `&gt;150k` &lt;int&gt;, `Don&#39;t know/refused` &lt;int&gt; Esta base de datos tiene 3 variables: religión, ingreso y frecuencia. Para limpiarla es necesario apilar las columnas (alargar los datos). Notemos que al alargar los datos desapareceran las columnas que se agrupan y dan lugar a dos nuevas columnas: la correspondiente a clave y la correspondiente a valor. Entonces, para alargar una base de datos usamos la función gather que recibe los argumentos: data: base de datos que vamos a reestructurar. key: nombre de la nueva variable que contiene lo que fueron los nombres de columnas que apilamos. value: nombre de la variable que almacenará los valores que corresponden a cada key. …: lo último que especificamos son las columnas que vamos a apilar, la notación para seleccionarlas es la misma que usamos con select(). pew_tidy &lt;- gather(data = pew, income, frequency, -religion) pew_tidy ## # A tibble: 180 x 3 ## religion income frequency ## &lt;chr&gt; &lt;chr&gt; &lt;int&gt; ## 1 Agnostic &lt;$10k 27 ## 2 Atheist &lt;$10k 12 ## 3 Buddhist &lt;$10k 27 ## 4 Catholic &lt;$10k 418 ## 5 Don’t know/refused &lt;$10k 15 ## 6 Evangelical Prot &lt;$10k 575 ## 7 Hindu &lt;$10k 1 ## 8 Historically Black Prot &lt;$10k 228 ## 9 Jehovah&#39;s Witness &lt;$10k 20 ## 10 Jewish &lt;$10k 19 ## # ... with 170 more rows Observemos que en la tabla ancha teníamos bajo la columna &lt;$10k, en el renglón correspondiente a Agnostic un valor de 27, y podemos ver que este valor en la tabla larga se almacena bajo la columna frecuencia y corresponde a religión Agnostic, income &lt;$10k. También es importante ver que en este ejemplo especificamos las columnas a apilar identificando la que no vamos a alargar con un signo negativo: es decir apila todas las columnas menos religión. La nueva estructura de la base de datos nos permite, por ejemplo, hacer fácilmente una gráfica donde podemos comparar las diferencias en las frecuencias. Nota: En esta sección no explicaremos las funciones de graficación pues estas se cubren en las notas introductorias a R. En esta parte nos queremos concentrar en como limpiar datos y ejemplificar lo sencillo que es trabajar con datos limpios, esto es, una vez que los datos fueron reestructurados es fácil construir gráficas y resúmenes. ggplot(pew_tidy, aes(x = income, y = frequency, color = religion, group = religion)) + geom_line() + theme(axis.text.x = element_text(angle = 90, hjust = 1)) Podemos hacer gráficas más interesantes si creamos nuevas variables: by_religion &lt;- group_by(pew_tidy, religion) pew_tidy_2 &lt;- pew_tidy %&gt;% filter(income != &quot;Don&#39;t know/refused&quot;) %&gt;% group_by(religion) %&gt;% mutate(percent = frequency / sum(frequency)) %&gt;% filter(sum(frequency) &gt; 1000) head(pew_tidy_2) ## # A tibble: 6 x 4 ## # Groups: religion [5] ## religion income frequency percent ## &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; ## 1 Catholic &lt;$10k 418 0.0637 ## 2 Evangelical Prot &lt;$10k 575 0.0724 ## 3 Historically Black Prot &lt;$10k 228 0.138 ## 4 Mainline Prot &lt;$10k 289 0.0471 ## 5 Unaffiliated &lt;$10k 217 0.0698 ## 6 Catholic $10-20k 617 0.0940 ggplot(pew_tidy_2, aes(x = income, y = percent, group = religion)) + facet_wrap(~ religion, nrow = 1) + geom_bar(stat = &quot;identity&quot;, fill = &quot;darkgray&quot;) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) En el código de arriba utilizamos las funciones group_by, filter y mutate que estudiaremos más adelante. Por ahora concentremonos en gather y spread. Otro ejemplo, veamos los datos de Billboard, aquí se registra la fecha en la que una canción entra por primera vez al top 100 de Billboard. billboard &lt;- read_csv(&quot;data/billboard.csv&quot;) ## Parsed with column specification: ## cols( ## .default = col_integer(), ## artist = col_character(), ## track = col_character(), ## time = col_time(format = &quot;&quot;), ## date.entered = col_date(format = &quot;&quot;), ## wk66 = col_character(), ## wk67 = col_character(), ## wk68 = col_character(), ## wk69 = col_character(), ## wk70 = col_character(), ## wk71 = col_character(), ## wk72 = col_character(), ## wk73 = col_character(), ## wk74 = col_character(), ## wk75 = col_character(), ## wk76 = col_character() ## ) ## See spec(...) for full column specifications. billboard ## # A tibble: 317 x 81 ## year artist track time date.entered wk1 wk2 wk3 wk4 wk5 ## &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;tim&gt; &lt;date&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 2000 2 Pac Baby… 04:22 2000-02-26 87 82 72 77 87 ## 2 2000 2Ge+h… The … 03:15 2000-09-02 91 87 92 NA NA ## 3 2000 3 Doo… Kryp… 03:53 2000-04-08 81 70 68 67 66 ## 4 2000 3 Doo… Loser 04:24 2000-10-21 76 76 72 69 67 ## 5 2000 504 B… Wobb… 03:35 2000-04-15 57 34 25 17 17 ## 6 2000 98^0 Give… 03:24 2000-08-19 51 39 34 26 26 ## 7 2000 A*Tee… Danc… 03:44 2000-07-08 97 97 96 95 100 ## 8 2000 Aaliy… I Do… 04:15 2000-01-29 84 62 51 41 38 ## 9 2000 Aaliy… Try … 04:03 2000-03-18 59 53 38 28 21 ## 10 2000 Adams… Open… 05:30 2000-08-26 76 76 74 69 68 ## # ... with 307 more rows, and 71 more variables: wk6 &lt;int&gt;, wk7 &lt;int&gt;, ## # wk8 &lt;int&gt;, wk9 &lt;int&gt;, wk10 &lt;int&gt;, wk11 &lt;int&gt;, wk12 &lt;int&gt;, wk13 &lt;int&gt;, ## # wk14 &lt;int&gt;, wk15 &lt;int&gt;, wk16 &lt;int&gt;, wk17 &lt;int&gt;, wk18 &lt;int&gt;, ## # wk19 &lt;int&gt;, wk20 &lt;int&gt;, wk21 &lt;int&gt;, wk22 &lt;int&gt;, wk23 &lt;int&gt;, ## # wk24 &lt;int&gt;, wk25 &lt;int&gt;, wk26 &lt;int&gt;, wk27 &lt;int&gt;, wk28 &lt;int&gt;, ## # wk29 &lt;int&gt;, wk30 &lt;int&gt;, wk31 &lt;int&gt;, wk32 &lt;int&gt;, wk33 &lt;int&gt;, ## # wk34 &lt;int&gt;, wk35 &lt;int&gt;, wk36 &lt;int&gt;, wk37 &lt;int&gt;, wk38 &lt;int&gt;, ## # wk39 &lt;int&gt;, wk40 &lt;int&gt;, wk41 &lt;int&gt;, wk42 &lt;int&gt;, wk43 &lt;int&gt;, ## # wk44 &lt;int&gt;, wk45 &lt;int&gt;, wk46 &lt;int&gt;, wk47 &lt;int&gt;, wk48 &lt;int&gt;, ## # wk49 &lt;int&gt;, wk50 &lt;int&gt;, wk51 &lt;int&gt;, wk52 &lt;int&gt;, wk53 &lt;int&gt;, ## # wk54 &lt;int&gt;, wk55 &lt;int&gt;, wk56 &lt;int&gt;, wk57 &lt;int&gt;, wk58 &lt;int&gt;, ## # wk59 &lt;int&gt;, wk60 &lt;int&gt;, wk61 &lt;int&gt;, wk62 &lt;int&gt;, wk63 &lt;int&gt;, ## # wk64 &lt;int&gt;, wk65 &lt;int&gt;, wk66 &lt;chr&gt;, wk67 &lt;chr&gt;, wk68 &lt;chr&gt;, ## # wk69 &lt;chr&gt;, wk70 &lt;chr&gt;, wk71 &lt;chr&gt;, wk72 &lt;chr&gt;, wk73 &lt;chr&gt;, ## # wk74 &lt;chr&gt;, wk75 &lt;chr&gt;, wk76 &lt;chr&gt; Notemos que el rank en cada semana (una vez que entró a la lista) está guardado en 75 columnas wk1 a wk75, este tipo de almacenamiento no es limpio pero puede ser útil al momento de ingresar la información. Para tener datos limpios apilamos las semanas de manera que sea una sola columna (nuevamente alargamos los datos): billboard_long &lt;- gather(billboard, week, rank, wk1:wk76, na.rm = TRUE) billboard_long ## # A tibble: 5,307 x 7 ## year artist track time date.entered week rank ## * &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;tim&gt; &lt;date&gt; &lt;chr&gt; &lt;chr&gt; ## 1 2000 2 Pac Baby Don&#39;t Cry (Kee… 04:22 2000-02-26 wk1 87 ## 2 2000 2Ge+her The Hardest Part Of… 03:15 2000-09-02 wk1 91 ## 3 2000 3 Doors Down Kryptonite 03:53 2000-04-08 wk1 81 ## 4 2000 3 Doors Down Loser 04:24 2000-10-21 wk1 76 ## 5 2000 504 Boyz Wobble Wobble 03:35 2000-04-15 wk1 57 ## 6 2000 98^0 Give Me Just One Ni… 03:24 2000-08-19 wk1 51 ## 7 2000 A*Teens Dancing Queen 03:44 2000-07-08 wk1 97 ## 8 2000 Aaliyah I Don&#39;t Wanna 04:15 2000-01-29 wk1 84 ## 9 2000 Aaliyah Try Again 04:03 2000-03-18 wk1 59 ## 10 2000 Adams, Yolan… Open My Heart 05:30 2000-08-26 wk1 76 ## # ... with 5,297 more rows Notemos que en esta ocasión especificamos las columnas que vamos a apilar indicando el nombre de la primera de ellas seguido de : y por último el nombre de la última variable a apilar. Por otra parte, la instrucción na.rm = TRUE se utiliza para eliminar los renglones con valores faltantes en la columna de value (rank), esto es, eliminamos aquellas observaciones que tenían NA en la columnas wknum de la tabla ancha. Ahora realizamos una limpieza adicional creando mejores variables de fecha. billboard_tidy &lt;- billboard_long %&gt;% mutate( week = parse_number(week), date = date.entered + 7 * (week - 1), rank = as.numeric(rank) ) %&gt;% select(-date.entered) billboard_tidy ## # A tibble: 5,307 x 7 ## year artist track time week rank date ## &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;tim&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;date&gt; ## 1 2000 2 Pac Baby Don&#39;t Cry (Keep… 04:22 1 87 2000-02-26 ## 2 2000 2Ge+her The Hardest Part Of … 03:15 1 91 2000-09-02 ## 3 2000 3 Doors Down Kryptonite 03:53 1 81 2000-04-08 ## 4 2000 3 Doors Down Loser 04:24 1 76 2000-10-21 ## 5 2000 504 Boyz Wobble Wobble 03:35 1 57 2000-04-15 ## 6 2000 98^0 Give Me Just One Nig… 03:24 1 51 2000-08-19 ## 7 2000 A*Teens Dancing Queen 03:44 1 97 2000-07-08 ## 8 2000 Aaliyah I Don&#39;t Wanna 04:15 1 84 2000-01-29 ## 9 2000 Aaliyah Try Again 04:03 1 59 2000-03-18 ## 10 2000 Adams, Yolanda Open My Heart 05:30 1 76 2000-08-26 ## # ... with 5,297 more rows Nuevamente, podemos hacer gráficas facilmente. tracks &lt;- filter(billboard_tidy, track %in% c(&quot;Higher&quot;, &quot;Amazed&quot;, &quot;Kryptonite&quot;, &quot;Breathe&quot;, &quot;With Arms Wide Open&quot;)) ggplot(tracks, aes(x = date, y = rank)) + geom_line() + facet_wrap(~track, nrow = 1) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) 2. Una columna asociada a más de una variable La siguiente base de datos proviene de la Organización Mundial de la Salud y contiene el número de casos confirmados de tuberculosis por país y año, la información esta por grupo demográfico de acuerdo a sexo (m, f), y edad (0-4, 5-14, etc). Los datos están disponibles en http://www.who.int/tb/country/data/download/en/. tb &lt;- read.csv(&quot;data/tb.csv&quot;) %&gt;% tbl_df() tb ## # A tibble: 5,769 x 22 ## iso2 year new_sp_m04 new_sp_m514 new_sp_m014 new_sp_m1524 new_sp_m2534 ## * &lt;fct&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 AD 1989 NA NA NA NA NA ## 2 AD 1990 NA NA NA NA NA ## 3 AD 1991 NA NA NA NA NA ## 4 AD 1992 NA NA NA NA NA ## 5 AD 1993 NA NA NA NA NA ## 6 AD 1994 NA NA NA NA NA ## 7 AD 1996 NA NA 0 0 0 ## 8 AD 1997 NA NA 0 0 1 ## 9 AD 1998 NA NA 0 0 0 ## 10 AD 1999 NA NA 0 0 0 ## # ... with 5,759 more rows, and 15 more variables: new_sp_m3544 &lt;int&gt;, ## # new_sp_m4554 &lt;int&gt;, new_sp_m5564 &lt;int&gt;, new_sp_m65 &lt;int&gt;, ## # new_sp_mu &lt;int&gt;, new_sp_f04 &lt;int&gt;, new_sp_f514 &lt;int&gt;, ## # new_sp_f014 &lt;int&gt;, new_sp_f1524 &lt;int&gt;, new_sp_f2534 &lt;int&gt;, ## # new_sp_f3544 &lt;int&gt;, new_sp_f4554 &lt;int&gt;, new_sp_f5564 &lt;int&gt;, ## # new_sp_f65 &lt;int&gt;, new_sp_fu &lt;int&gt; De manera similar a los ejemplos anteriores, utiliza la función gather para apilar las columnas correspondientes a sexo-edad.             Piensa en como podemos separar la “variable” sexo-edad en dos columnas. Ahora separaremos las variables sexo y edad de la columna demo, para ello debemos pasar a la función separate(), esta recibe como parámetros: el nombre de la base de datos, el nombre de la variable que deseamos separar en más de una, la posición de donde deseamos “cortar” (hay más opciones para especificar como separar, ver ?separate). El default es separar valores en todos los lugares que encuentre un caracter que no es alfanumérico (espacio, guión,…). tb_tidy &lt;- separate(tb_long, demo, c(&quot;sex&quot;, &quot;age&quot;), 8) tb_tidy ## # A tibble: 35,750 x 5 ## iso2 year sex age n ## * &lt;fct&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; ## 1 AD 2005 new_sp_m 04 0 ## 2 AD 2006 new_sp_m 04 0 ## 3 AD 2008 new_sp_m 04 0 ## 4 AE 2006 new_sp_m 04 0 ## 5 AE 2007 new_sp_m 04 0 ## 6 AE 2008 new_sp_m 04 0 ## 7 AG 2007 new_sp_m 04 0 ## 8 AL 2005 new_sp_m 04 0 ## 9 AL 2006 new_sp_m 04 1 ## 10 AL 2007 new_sp_m 04 0 ## # ... with 35,740 more rows table(tb_tidy$sex) ## ## new_sp_f new_sp_m ## 17830 17920 # creamos un mejor código de genero tb_tidy &lt;- mutate(tb_tidy, sex = substr(sex, 8, 8)) table(tb_tidy$sex) ## ## f m ## 17830 17920 3. Variables almacenadas en filas y columnas El problema más difícil es cuando las variables están tanto en filas como en columnas, veamos una base de datos de clima en Cuernavaca. ¿Cuáles son las variables en estos datos? clima &lt;- read_delim(&quot;data/clima.txt&quot;, &quot;\\t&quot;, escape_double = FALSE, trim_ws = TRUE) ## Parsed with column specification: ## cols( ## .default = col_integer(), ## id = col_character(), ## element = col_character(), ## d9 = col_character(), ## d12 = col_character(), ## d18 = col_character(), ## d19 = col_character(), ## d20 = col_character(), ## d21 = col_character(), ## d22 = col_character(), ## d24 = col_character() ## ) ## See spec(...) for full column specifications. Estos datos tienen variables en columnas individuales (id, año, mes), en múltiples columnas (día, d1-d31) y en filas (tmin, tmax). Comencemos por apilar las columnas. clima_long &lt;- gather(clima, day, value, d1:d31, na.rm = TRUE) clima_long ## # A tibble: 66 x 6 ## id year month element day value ## * &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 MX000017004 2010 12 TMAX d1 299 ## 2 MX000017004 2010 12 TMIN d1 138 ## 3 MX000017004 2010 2 TMAX d2 273 ## 4 MX000017004 2010 2 TMIN d2 144 ## 5 MX000017004 2010 11 TMAX d2 313 ## 6 MX000017004 2010 11 TMIN d2 163 ## 7 MX000017004 2010 2 TMAX d3 241 ## 8 MX000017004 2010 2 TMIN d3 144 ## 9 MX000017004 2010 7 TMAX d3 286 ## 10 MX000017004 2010 7 TMIN d3 175 ## # ... with 56 more rows Podemos crear algunas variables adicionales. clima_vars &lt;- clima_long %&gt;% mutate(day = parse_number(day), value = as.numeric(value) / 10) %&gt;% select(id, year, month, day, element, value) %&gt;% arrange(id, year, month, day) clima_vars ## # A tibble: 66 x 6 ## id year month day element value ## &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 MX000017004 2010 1 30 TMAX 27.8 ## 2 MX000017004 2010 1 30 TMIN 14.5 ## 3 MX000017004 2010 2 2 TMAX 27.3 ## 4 MX000017004 2010 2 2 TMIN 14.4 ## 5 MX000017004 2010 2 3 TMAX 24.1 ## 6 MX000017004 2010 2 3 TMIN 14.4 ## 7 MX000017004 2010 2 11 TMAX 29.7 ## 8 MX000017004 2010 2 11 TMIN 13.4 ## 9 MX000017004 2010 2 23 TMAX 29.9 ## 10 MX000017004 2010 2 23 TMIN 10.7 ## # ... with 56 more rows Finalmente, la columna element no es una variable, sino que almacena el nombre de dos variables, la operación que debemos aplicar (spread) es el inverso de apilar (gather): clima_tidy &lt;- spread(clima_vars, element, value) clima_tidy ## # A tibble: 33 x 6 ## id year month day TMAX TMIN ## &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 MX000017004 2010 1 30 27.8 14.5 ## 2 MX000017004 2010 2 2 27.3 14.4 ## 3 MX000017004 2010 2 3 24.1 14.4 ## 4 MX000017004 2010 2 11 29.7 13.4 ## 5 MX000017004 2010 2 23 29.9 10.7 ## 6 MX000017004 2010 3 5 32.1 14.2 ## 7 MX000017004 2010 3 10 34.5 16.8 ## 8 MX000017004 2010 3 16 31.1 17.6 ## 9 MX000017004 2010 4 27 36.3 16.7 ## 10 MX000017004 2010 5 27 33.2 18.2 ## # ... with 23 more rows Ahora es inmediato no solo hacer gráficas sino también ajustar un modelo. # ajustamos un modelo lineal donde la variable respuesta es temperatura # máxima, y la variable explicativa es el mes clima_lm &lt;- lm(TMAX ~ factor(month), data = clima_tidy) summary(clima_lm) ## ## Call: ## lm(formula = TMAX ~ factor(month), data = clima_tidy) ## ## Residuals: ## Min 1Q Median 3Q Max ## -3.65 -0.92 -0.02 1.05 3.18 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 27.8000 1.8610 14.938 5.34e-13 *** ## factor(month)2 -0.0500 2.0807 -0.024 0.98104 ## factor(month)3 4.7667 2.1489 2.218 0.03717 * ## factor(month)4 8.5000 2.6319 3.230 0.00385 ** ## factor(month)5 5.4000 2.6319 2.052 0.05228 . ## factor(month)6 1.2500 2.2793 0.548 0.58892 ## factor(month)7 1.4500 2.2793 0.636 0.53123 ## factor(month)8 0.4714 1.9895 0.237 0.81488 ## factor(month)10 1.1000 2.0386 0.540 0.59491 ## factor(month)11 0.3200 2.0386 0.157 0.87670 ## factor(month)12 1.0500 2.2793 0.461 0.64955 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 1.861 on 22 degrees of freedom ## Multiple R-squared: 0.6182, Adjusted R-squared: 0.4447 ## F-statistic: 3.563 on 10 and 22 DF, p-value: 0.006196 4. Mas de un tipo de observación en una misma tabla En ocasiones las bases de datos involucran valores en diferentes niveles, en diferentes tipos de unidad observacional. En la limpieza de datos, cada unidad observacional debe estar almacenada en su propia tabla (esto esta ligado a normalización de una base de datos), es importante para evitar inconsistencias en los datos. ¿Cuáles son las unidades observacionales de los datos de billboard? billboard_tidy ## # A tibble: 5,307 x 7 ## year artist track time week rank date ## &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;tim&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;date&gt; ## 1 2000 2 Pac Baby Don&#39;t Cry (Keep… 04:22 1 87 2000-02-26 ## 2 2000 2Ge+her The Hardest Part Of … 03:15 1 91 2000-09-02 ## 3 2000 3 Doors Down Kryptonite 03:53 1 81 2000-04-08 ## 4 2000 3 Doors Down Loser 04:24 1 76 2000-10-21 ## 5 2000 504 Boyz Wobble Wobble 03:35 1 57 2000-04-15 ## 6 2000 98^0 Give Me Just One Nig… 03:24 1 51 2000-08-19 ## 7 2000 A*Teens Dancing Queen 03:44 1 97 2000-07-08 ## 8 2000 Aaliyah I Don&#39;t Wanna 04:15 1 84 2000-01-29 ## 9 2000 Aaliyah Try Again 04:03 1 59 2000-03-18 ## 10 2000 Adams, Yolanda Open My Heart 05:30 1 76 2000-08-26 ## # ... with 5,297 more rows Separemos esta base de datos en dos: la tabla canción que almacena artista, nombre de la canción y duración; la tabla rank que almacena el ranking de la canción en cada semana. song &lt;- billboard_tidy %&gt;% select(artist, track, year, time) %&gt;% unique() %&gt;% arrange(artist) %&gt;% mutate(song_id = row_number(artist)) song ## # A tibble: 317 x 5 ## artist track year time song_id ## &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;time&gt; &lt;int&gt; ## 1 2 Pac Baby Don&#39;t Cry (Keep... 2000 04:22 1 ## 2 2Ge+her The Hardest Part Of ... 2000 03:15 2 ## 3 3 Doors Down Kryptonite 2000 03:53 3 ## 4 3 Doors Down Loser 2000 04:24 4 ## 5 504 Boyz Wobble Wobble 2000 03:35 5 ## 6 98^0 Give Me Just One Nig... 2000 03:24 6 ## 7 A*Teens Dancing Queen 2000 03:44 7 ## 8 Aaliyah I Don&#39;t Wanna 2000 04:15 8 ## 9 Aaliyah Try Again 2000 04:03 9 ## 10 Adams, Yolanda Open My Heart 2000 05:30 10 ## # ... with 307 more rows rank &lt;- billboard_tidy %&gt;% left_join(song, c(&quot;artist&quot;, &quot;track&quot;, &quot;year&quot;, &quot;time&quot;)) %&gt;% select(song_id, date, week, rank) %&gt;% arrange(song_id, date) %&gt;% tbl_df rank ## # A tibble: 5,307 x 4 ## song_id date week rank ## &lt;int&gt; &lt;date&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1 2000-02-26 1 87 ## 2 1 2000-03-04 2 82 ## 3 1 2000-03-11 3 72 ## 4 1 2000-03-18 4 77 ## 5 1 2000-03-25 5 87 ## 6 1 2000-04-01 6 94 ## 7 1 2000-04-08 7 99 ## 8 2 2000-09-02 1 91 ## 9 2 2000-09-09 2 87 ## 10 2 2000-09-16 3 92 ## # ... with 5,297 more rows 5. Una misma unidad observacional está almacenada en múltiples tablas También es común que los valores sobre una misma unidad observacional estén separados en muchas tablas o archivos, es común que estas tablas esten divididas de acuerdo a una variable, de tal manera que cada archivo representa a una persona, año o ubicación. Para juntar los archivos hacemos lo siguiente: Leemos los archivos en una lista de tablas. Para cada tabla agregamos una columna que registra el nombre del archivo original. Combinamos las tablas en un solo data frame. Veamos un ejemplo, descarga la carpeta specdata, ésta contiene 332 archivos csv que almacenan información de monitoreo de contaminación en 332 ubicaciones de EUA. Cada archivo contiene información de una unidad de monitoreo y el número de identificación del monitor es el nombre del archivo. Los pasos en R (usando el paquete purrr), primero creamos un vector con los nombres de los archivos en un directorio, eligiendo aquellos que contengan las letras “.csv”. paths &lt;- dir(&quot;data/specdata&quot;, pattern = &quot;\\\\.csv$&quot;, full.names = TRUE) Después le asignamos el nombre del csv al nombre de cada elemento del vector. Este paso se realiza para preservar los nombres de los archivos ya que estos los asignaremos a una variable mas adelante. paths &lt;- set_names(paths, basename(paths)) La función map_df itera sobre cada dirección, lee el csv en dicha dirección y los combina en un data frame. specdata_us &lt;- map_df(paths, ~read_csv(., col_types = &quot;Tddi&quot;), .id = &quot;filename&quot;) # eliminamos la basura del id specdata &lt;- specdata_us %&gt;% mutate(monitor = parse_number(filename)) %&gt;% select(id = ID, monitor, date = Date, sulfate, nitrate) specdata ## # A tibble: 772,087 x 5 ## id monitor date sulfate nitrate ## &lt;int&gt; &lt;dbl&gt; &lt;dttm&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1 1 2003-01-01 00:00:00 NA NA ## 2 1 1 2003-01-02 00:00:00 NA NA ## 3 1 1 2003-01-03 00:00:00 NA NA ## 4 1 1 2003-01-04 00:00:00 NA NA ## 5 1 1 2003-01-05 00:00:00 NA NA ## 6 1 1 2003-01-06 00:00:00 NA NA ## 7 1 1 2003-01-07 00:00:00 NA NA ## 8 1 1 2003-01-08 00:00:00 NA NA ## 9 1 1 2003-01-09 00:00:00 NA NA ## 10 1 1 2003-01-10 00:00:00 NA NA ## # ... with 772,077 more rows 6. Otras consideraciones En las buenas prácticas es importante tomar en cuenta los siguientes puntos: Incluir un encabezado con el nombre de las variables. Los nombres de las variables deben ser entendibles (e.g. AgeAtDiagnosis es mejor que AgeDx). En general los datos se deben guardar en un archivo por tabla. Escribir un script con las modificaciones que se hicieron a los datos crudos (reproducibilidad). Otros aspectos importantes en la limpieza de datos son: selección del tipo de variables (por ejemplo fechas), datos faltantes, typos y detección de valores atípicos. Recursos adicionales Tidy Data, Hadley Wickham. The Split-Apply-Combine Strategy for Data Analysis, Hadley Wickham 2011. Data Import Cheat Sheet, RStudio. Data Transformation Cheat Sheet, RStudio. "],
["referencias.html", "Referencias", " Referencias "]
]
